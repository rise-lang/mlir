//
// Created by martin on 26/11/2019.
//

#include "mlir/Conversion/RiseBuilderTest/RiseBuilderTest.h"
#include "mlir/Dialect/Rise/IR/Dialect.h"
#include "mlir/Dialect/Rise/Passes.h"
#include "mlir/Dialect/SCF/SCF.h"
#include "mlir/Dialect/StandardOps/IR/Ops.h"
#include "mlir/IR/Builders.h"

#include "mlir/Dialect/Affine/EDSC/Intrinsics.h"
#include "mlir/Dialect/Linalg/EDSC/Builders.h"
#include "mlir/Dialect/Linalg/EDSC/Intrinsics.h"
#include "mlir/Dialect/MemRef/IR/MemRef.h"
#include "mlir/Dialect/SCF/EDSC/Intrinsics.h"
#include "mlir/Dialect/StandardOps/EDSC/Intrinsics.h"
#include "mlir/EDSC/Builders.h"
#include "mlir/Transforms/GreedyPatternRewriteDriver.h"

#include "mlir/Dialect/Affine/IR/AffineOps.h"
#include "mlir/Dialect/Linalg/IR/LinalgOps.h"
#include "mlir/IR/BlockAndValueMapping.h"
#include "mlir/IR/IntegerSet.h"
#include "mlir/IR/MLIRContext.h"
#include "mlir/Pass/Pass.h"
#include "mlir/Transforms/DialectConversion.h"
#include "mlir/Transforms/GreedyPatternRewriteDriver.h"

#include <iostream>
#include <mlir/EDSC/Builders.h>

using namespace mlir;
using namespace mlir::rise;
using namespace mlir::edsc;

namespace {
struct RiseBuilderTestPass : public RiseBuilderTestBase<RiseBuilderTestPass> {
  void runOnFunction() override;
};

//===----------------------------------------------------------------------===//
// Patterns
//===----------------------------------------------------------------------===//

struct RiseBuilderTestPattern : public OpRewritePattern<FuncOp> {
  using OpRewritePattern<FuncOp>::OpRewritePattern;
  LogicalResult match(FuncOp funcOp) const override;
  void rewrite(FuncOp funcOp, PatternRewriter &rewriter) const override;
};

LogicalResult RiseBuilderTestPattern::match(FuncOp funcOp) const {
  // always match. I set the number of iterations of pattern applications to 1,
  // so the pattern is only applied once
  return success();
}

void RiseBuilderTestPattern::rewrite(FuncOp funcOp,
                                     PatternRewriter &rewriter) const {
  //===--------------------------------------------------------------------===//
  // rewriting here
  //===--------------------------------------------------------------------===//

  // some placeholder location
  Location loc = funcOp.getLoc();

  // creating inOps for the funcOpArgs
  rise::ScalarType scalarF32Type = rise::ScalarType::get(
      rewriter.getContext(), Float32Type::get(rewriter.getContext()));
  rise::ArrayType inAType = rise::ArrayType::get(
      rewriter.getContext(), rise::Nat::get(rewriter.getContext(), 1024),
      rise::ArrayType::get(rewriter.getContext(),
                           rise::Nat::get(rewriter.getContext(), 1024),
                           scalarF32Type));

  rewriter.setInsertionPointToStart(&funcOp.getBody().front());
  LoweringUnitOp loweringUnit = rewriter.create<LoweringUnitOp>(loc);
  // setting insertion point to beginning of block:
  rewriter.setInsertionPointToStart(loweringUnit.getBody());

  // emit two  rise.in ops
  rise::InOp inAOp =
      rewriter.create<InOp>(loc, TypeRange{inAType}, funcOp.getArgument(1));
  rise::InOp inBOp =
      rewriter.create<InOp>(loc, TypeRange{inAType}, funcOp.getArgument(2));

  // generated by Scala rise toMLIR tool
  auto mm = [](OpBuilder &b, Location loc, Value in0, Value in1) {
    return [&] { // ApplyOp
      auto type = rise::ArrayType::get(
          b.getContext(), rise::Nat::get(b.getContext(), 1024),
          rise::ArrayType::get(
              b.getContext(), rise::Nat::get(b.getContext(), 1024),
              rise::ScalarType::get(b.getContext(),
                                    Float32Type::get(b.getContext()))));
      auto arg0 = [&] { // LambdaOp
        auto type = rise::FunType::get(
            b.getContext(),
            rise::ArrayType::get(
                b.getContext(), rise::Nat::get(b.getContext(), 1024),
                rise::ScalarType::get(b.getContext(),
                                      Float32Type::get(b.getContext()))),
            rise::ArrayType::get(
                b.getContext(), rise::Nat::get(b.getContext(), 1024),
                rise::ScalarType::get(b.getContext(),
                                      Float32Type::get(b.getContext()))));
        auto fun = [&](OpBuilder &b, Location loc,
                       MutableArrayRef<BlockArgument> args0) {
          OpBuilder::InsertionGuard guard(b);
          return [&] { // ApplyOp
            auto type = rise::ArrayType::get(
                b.getContext(), rise::Nat::get(b.getContext(), 1024),
                rise::ScalarType::get(b.getContext(),
                                      Float32Type::get(b.getContext())));
            auto arg0 = [&] { // LambdaOp
              auto type = rise::FunType::get(
                  b.getContext(),
                  rise::ArrayType::get(
                      b.getContext(), rise::Nat::get(b.getContext(), 1024),
                      rise::ScalarType::get(b.getContext(),
                                            Float32Type::get(b.getContext()))),
                  rise::ScalarType::get(b.getContext(),
                                        Float32Type::get(b.getContext())));
              auto fun = [&](OpBuilder &b, Location loc,
                             MutableArrayRef<BlockArgument> args1) {
                OpBuilder::InsertionGuard guard(b);
                return [&] { // ApplyOp
                  auto type = rise::ScalarType::get(
                      b.getContext(), Float32Type::get(b.getContext()));
                  auto arg0 = [&] { // LambdaOp
                    auto type = rise::FunType::get(
                        b.getContext(),
                        rise::ScalarType::get(b.getContext(),
                                              Float32Type::get(b.getContext())),
                        rise::FunType::get(
                            b.getContext(),
                            rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext())),
                            rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext()))));
                    auto fun = [&](OpBuilder &b, Location loc,
                                   MutableArrayRef<BlockArgument> args2) {
                      OpBuilder::InsertionGuard guard(b);
                      return [&] { // EmbedOp
                        auto type = rise::ScalarType::get(
                            b.getContext(), Float32Type::get(b.getContext()));
                        auto arg0 = args2[0];
                        auto arg1 = args2[1];
                        auto fun = [&](OpBuilder &b, Location loc,
                                       MutableArrayRef<BlockArgument> args) {
                          OpBuilder::InsertionGuard guard(b);
                          return b.create<AddFOp>(loc, args[0], args[1]);
                        };
                        return b.create<EmbedOp>(loc, type,
                                                 ValueRange{arg0, arg1}, fun);
                      }();
                    };
                    return b.create<LambdaOp>(loc, type, fun);
                  }();
                  auto arg1 = [&] { // LiteralOp
                    auto type = rise::ScalarType::get(
                        b.getContext(), Float32Type::get(b.getContext()));
                    return b.create<LiteralOp>(
                        loc, type,
                        LiteralAttr::get(b.getContext(), type, "0.0000"));
                  }();
                  auto arg2 = [&] { // ApplyOp
                    auto type = rise::ArrayType::get(
                        b.getContext(), rise::Nat::get(b.getContext(), 1024),
                        rise::ScalarType::get(
                            b.getContext(), Float32Type::get(b.getContext())));
                    auto arg0 = [&] { // LambdaOp
                      auto type = rise::FunType::get(
                          b.getContext(),
                          rise::Tuple::get(
                              b.getContext(),
                              rise::ScalarType::get(
                                  b.getContext(),
                                  Float32Type::get(b.getContext())),
                              rise::ScalarType::get(
                                  b.getContext(),
                                  Float32Type::get(b.getContext()))),
                          rise::ScalarType::get(
                              b.getContext(),
                              Float32Type::get(b.getContext())));
                      auto fun = [&](OpBuilder &b, Location loc,
                                     MutableArrayRef<BlockArgument> args3) {
                        OpBuilder::InsertionGuard guard(b);
                        return [&] { // EmbedOp
                          auto type = rise::ScalarType::get(
                              b.getContext(), Float32Type::get(b.getContext()));
                          auto arg0 = [&] { // ApplyOp
                            auto type = rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext()));
                            auto arg0 = args3[0];
                            auto fun = [&] { // FstOp
                              auto type = rise::FunType::get(
                                  b.getContext(),
                                  rise::Tuple::get(
                                      b.getContext(),
                                      rise::ScalarType::get(
                                          b.getContext(),
                                          Float32Type::get(b.getContext())),
                                      rise::ScalarType::get(
                                          b.getContext(),
                                          Float32Type::get(b.getContext()))),
                                  rise::ScalarType::get(
                                      b.getContext(),
                                      Float32Type::get(b.getContext())));
                              auto dt1 = rise::DataTypeAttr::get(
                                  b.getContext(),
                                  rise::ScalarType::get(
                                      b.getContext(),
                                      Float32Type::get(b.getContext())));
                              auto dt2 = rise::DataTypeAttr::get(
                                  b.getContext(),
                                  rise::ScalarType::get(
                                      b.getContext(),
                                      Float32Type::get(b.getContext())));
                              return b.create<FstOp>(loc, type, dt1, dt2);
                            }();
                            return b.create<ApplyOp>(loc, type, fun,
                                                     ValueRange{arg0});
                          }();
                          auto arg1 = [&] { // ApplyOp
                            auto type = rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext()));
                            auto arg0 = args3[0];
                            auto fun = [&] { // SndOp
                              auto type = rise::FunType::get(
                                  b.getContext(),
                                  rise::Tuple::get(
                                      b.getContext(),
                                      rise::ScalarType::get(
                                          b.getContext(),
                                          Float32Type::get(b.getContext())),
                                      rise::ScalarType::get(
                                          b.getContext(),
                                          Float32Type::get(b.getContext()))),
                                  rise::ScalarType::get(
                                      b.getContext(),
                                      Float32Type::get(b.getContext())));
                              auto dt1 = rise::DataTypeAttr::get(
                                  b.getContext(),
                                  rise::ScalarType::get(
                                      b.getContext(),
                                      Float32Type::get(b.getContext())));
                              auto dt2 = rise::DataTypeAttr::get(
                                  b.getContext(),
                                  rise::ScalarType::get(
                                      b.getContext(),
                                      Float32Type::get(b.getContext())));
                              return b.create<SndOp>(loc, type, dt1, dt2);
                            }();
                            return b.create<ApplyOp>(loc, type, fun,
                                                     ValueRange{arg0});
                          }();
                          auto fun = [&](OpBuilder &b, Location loc,
                                         MutableArrayRef<BlockArgument> args) {
                            OpBuilder::InsertionGuard guard(b);
                            return b.create<MulFOp>(loc, args[0], args[1]);
                          };
                          return b.create<EmbedOp>(loc, type,
                                                   ValueRange{arg0, arg1}, fun);
                        }();
                      };
                      return b.create<LambdaOp>(loc, type, fun);
                    }();
                    auto arg1 = [&] { // ApplyOp
                      auto type = rise::ArrayType::get(
                          b.getContext(), rise::Nat::get(b.getContext(), 1024),
                          rise::Tuple::get(
                              b.getContext(),
                              rise::ScalarType::get(
                                  b.getContext(),
                                  Float32Type::get(b.getContext())),
                              rise::ScalarType::get(
                                  b.getContext(),
                                  Float32Type::get(b.getContext()))));
                      auto arg0 = args0[0];
                      auto arg1 = args1[0];
                      auto fun = [&] { // ZipOp
                        auto type = rise::FunType::get(
                            b.getContext(),
                            rise::ArrayType::get(
                                b.getContext(),
                                rise::Nat::get(b.getContext(), 1024),
                                rise::ScalarType::get(
                                    b.getContext(),
                                    Float32Type::get(b.getContext()))),
                            rise::FunType::get(
                                b.getContext(),
                                rise::ArrayType::get(
                                    b.getContext(),
                                    rise::Nat::get(b.getContext(), 1024),
                                    rise::ScalarType::get(
                                        b.getContext(),
                                        Float32Type::get(b.getContext()))),
                                rise::ArrayType::get(
                                    b.getContext(),
                                    rise::Nat::get(b.getContext(), 1024),
                                    rise::Tuple::get(
                                        b.getContext(),
                                        rise::ScalarType::get(
                                            b.getContext(),
                                            Float32Type::get(b.getContext())),
                                        rise::ScalarType::get(
                                            b.getContext(),
                                            Float32Type::get(
                                                b.getContext()))))));
                        auto n = rise::NatAttr::get(
                            b.getContext(),
                            rise::Nat::get(b.getContext(), 1024));
                        auto dt1 = rise::DataTypeAttr::get(
                            b.getContext(),
                            rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext())));
                        auto dt2 = rise::DataTypeAttr::get(
                            b.getContext(),
                            rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext())));
                        return b.create<ZipOp>(loc, type, n, dt1, dt2);
                      }();
                      return b.create<ApplyOp>(loc, type, fun,
                                               ValueRange{arg0, arg1});
                    }();
                    auto fun = [&] { // MapSeqOp
                      auto type = rise::FunType::get(
                          b.getContext(),
                          rise::FunType::get(
                              b.getContext(),
                              rise::Tuple::get(
                                  b.getContext(),
                                  rise::ScalarType::get(
                                      b.getContext(),
                                      Float32Type::get(b.getContext())),
                                  rise::ScalarType::get(
                                      b.getContext(),
                                      Float32Type::get(b.getContext()))),
                              rise::ScalarType::get(
                                  b.getContext(),
                                  Float32Type::get(b.getContext()))),
                          rise::FunType::get(
                              b.getContext(),
                              rise::ArrayType::get(
                                  b.getContext(),
                                  rise::Nat::get(b.getContext(), 1024),
                                  rise::Tuple::get(
                                      b.getContext(),
                                      rise::ScalarType::get(
                                          b.getContext(),
                                          Float32Type::get(b.getContext())),
                                      rise::ScalarType::get(
                                          b.getContext(),
                                          Float32Type::get(b.getContext())))),
                              rise::ArrayType::get(
                                  b.getContext(),
                                  rise::Nat::get(b.getContext(), 1024),
                                  rise::ScalarType::get(
                                      b.getContext(),
                                      Float32Type::get(b.getContext())))));
                      auto n = rise::NatAttr::get(
                          b.getContext(), rise::Nat::get(b.getContext(), 1024));
                      auto dt1 = rise::DataTypeAttr::get(
                          b.getContext(),
                          rise::Tuple::get(
                              b.getContext(),
                              rise::ScalarType::get(
                                  b.getContext(),
                                  Float32Type::get(b.getContext())),
                              rise::ScalarType::get(
                                  b.getContext(),
                                  Float32Type::get(b.getContext()))));
                      auto dt2 = rise::DataTypeAttr::get(
                          b.getContext(),
                          rise::ScalarType::get(
                              b.getContext(),
                              Float32Type::get(b.getContext())));
                      auto lowerTo = StringAttr::get(b.getContext(), "scf");
                      return b.create<MapSeqOp>(loc, type, n, dt1, dt2,
                                                lowerTo);
                    }();
                    return b.create<ApplyOp>(loc, type, fun,
                                             ValueRange{arg0, arg1});
                  }();
                  auto fun = [&] { // ReduceSeqOp
                    auto type = rise::FunType::get(
                        b.getContext(),
                        rise::FunType::get(
                            b.getContext(),
                            rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext())),
                            rise::FunType::get(
                                b.getContext(),
                                rise::ScalarType::get(
                                    b.getContext(),
                                    Float32Type::get(b.getContext())),
                                rise::ScalarType::get(
                                    b.getContext(),
                                    Float32Type::get(b.getContext())))),
                        rise::FunType::get(
                            b.getContext(),
                            rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext())),
                            rise::FunType::get(
                                b.getContext(),
                                rise::ArrayType::get(
                                    b.getContext(),
                                    rise::Nat::get(b.getContext(), 1024),
                                    rise::ScalarType::get(
                                        b.getContext(),
                                        Float32Type::get(b.getContext()))),
                                rise::ScalarType::get(
                                    b.getContext(),
                                    Float32Type::get(b.getContext())))));
                    auto n = rise::NatAttr::get(
                        b.getContext(), rise::Nat::get(b.getContext(), 1024));
                    auto dt1 = rise::DataTypeAttr::get(
                        b.getContext(),
                        rise::ScalarType::get(
                            b.getContext(), Float32Type::get(b.getContext())));
                    auto dt2 = rise::DataTypeAttr::get(
                        b.getContext(),
                        rise::ScalarType::get(
                            b.getContext(), Float32Type::get(b.getContext())));
                    auto lowerTo = StringAttr::get(b.getContext(), "scf");
                    return b.create<ReduceSeqOp>(loc, type, n, dt1, dt2,
                                                 lowerTo);
                  }();
                  return b.create<ApplyOp>(loc, type, fun,
                                           ValueRange{arg0, arg1, arg2});
                }();
              };
              return b.create<LambdaOp>(loc, type, fun);
            }();
            auto arg1 = [&] { // ApplyOp
              auto type = rise::ArrayType::get(
                  b.getContext(), rise::Nat::get(b.getContext(), 1024),
                  rise::ArrayType::get(
                      b.getContext(), rise::Nat::get(b.getContext(), 1024),
                      rise::ScalarType::get(b.getContext(),
                                            Float32Type::get(b.getContext()))));
              auto arg0 = in1;
              auto fun = [&] { // TransposeOp
                auto type = rise::FunType::get(
                    b.getContext(),
                    rise::ArrayType::get(
                        b.getContext(), rise::Nat::get(b.getContext(), 1024),
                        rise::ArrayType::get(
                            b.getContext(),
                            rise::Nat::get(b.getContext(), 1024),
                            rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext())))),
                    rise::ArrayType::get(
                        b.getContext(), rise::Nat::get(b.getContext(), 1024),
                        rise::ArrayType::get(
                            b.getContext(),
                            rise::Nat::get(b.getContext(), 1024),
                            rise::ScalarType::get(
                                b.getContext(),
                                Float32Type::get(b.getContext())))));
                auto n = rise::NatAttr::get(
                    b.getContext(), rise::Nat::get(b.getContext(), 1024));
                auto m = rise::NatAttr::get(
                    b.getContext(), rise::Nat::get(b.getContext(), 1024));
                auto dt = rise::DataTypeAttr::get(
                    b.getContext(),
                    rise::ScalarType::get(b.getContext(),
                                          Float32Type::get(b.getContext())));
                return b.create<TransposeOp>(loc, type, n, m, dt);
              }();
              return b.create<ApplyOp>(loc, type, fun, ValueRange{arg0});
            }();
            auto fun = [&] { // MapSeqOp
              auto type = rise::FunType::get(
                  b.getContext(),
                  rise::FunType::get(
                      b.getContext(),
                      rise::ArrayType::get(
                          b.getContext(), rise::Nat::get(b.getContext(), 1024),
                          rise::ScalarType::get(
                              b.getContext(),
                              Float32Type::get(b.getContext()))),
                      rise::ScalarType::get(b.getContext(),
                                            Float32Type::get(b.getContext()))),
                  rise::FunType::get(
                      b.getContext(),
                      rise::ArrayType::get(
                          b.getContext(), rise::Nat::get(b.getContext(), 1024),
                          rise::ArrayType::get(
                              b.getContext(),
                              rise::Nat::get(b.getContext(), 1024),
                              rise::ScalarType::get(
                                  b.getContext(),
                                  Float32Type::get(b.getContext())))),
                      rise::ArrayType::get(
                          b.getContext(), rise::Nat::get(b.getContext(), 1024),
                          rise::ScalarType::get(
                              b.getContext(),
                              Float32Type::get(b.getContext())))));
              auto n = rise::NatAttr::get(b.getContext(),
                                          rise::Nat::get(b.getContext(), 1024));
              auto dt1 = rise::DataTypeAttr::get(
                  b.getContext(),
                  rise::ArrayType::get(
                      b.getContext(), rise::Nat::get(b.getContext(), 1024),
                      rise::ScalarType::get(b.getContext(),
                                            Float32Type::get(b.getContext()))));
              auto dt2 = rise::DataTypeAttr::get(
                  b.getContext(),
                  rise::ScalarType::get(b.getContext(),
                                        Float32Type::get(b.getContext())));
              auto lowerTo = StringAttr::get(b.getContext(), "scf");
              return b.create<MapSeqOp>(loc, type, n, dt1, dt2, lowerTo);
            }();
            return b.create<ApplyOp>(loc, type, fun, ValueRange{arg0, arg1});
          }();
        };
        return b.create<LambdaOp>(loc, type, fun);
      }();
      auto arg1 = in0;
      auto fun = [&] { // MapSeqOp
        auto type = rise::FunType::get(
            b.getContext(),
            rise::FunType::get(
                b.getContext(),
                rise::ArrayType::get(
                    b.getContext(), rise::Nat::get(b.getContext(), 1024),
                    rise::ScalarType::get(b.getContext(),
                                          Float32Type::get(b.getContext()))),
                rise::ArrayType::get(
                    b.getContext(), rise::Nat::get(b.getContext(), 1024),
                    rise::ScalarType::get(b.getContext(),
                                          Float32Type::get(b.getContext())))),
            rise::FunType::get(
                b.getContext(),
                rise::ArrayType::get(
                    b.getContext(), rise::Nat::get(b.getContext(), 1024),
                    rise::ArrayType::get(
                        b.getContext(), rise::Nat::get(b.getContext(), 1024),
                        rise::ScalarType::get(
                            b.getContext(), Float32Type::get(b.getContext())))),
                rise::ArrayType::get(
                    b.getContext(), rise::Nat::get(b.getContext(), 1024),
                    rise::ArrayType::get(
                        b.getContext(), rise::Nat::get(b.getContext(), 1024),
                        rise::ScalarType::get(
                            b.getContext(),
                            Float32Type::get(b.getContext()))))));
        auto n = rise::NatAttr::get(b.getContext(),
                                    rise::Nat::get(b.getContext(), 1024));
        auto dt1 = rise::DataTypeAttr::get(
            b.getContext(),
            rise::ArrayType::get(
                b.getContext(), rise::Nat::get(b.getContext(), 1024),
                rise::ScalarType::get(b.getContext(),
                                      Float32Type::get(b.getContext()))));
        auto dt2 = rise::DataTypeAttr::get(
            b.getContext(),
            rise::ArrayType::get(
                b.getContext(), rise::Nat::get(b.getContext(), 1024),
                rise::ScalarType::get(b.getContext(),
                                      Float32Type::get(b.getContext()))));
        auto lowerTo = StringAttr::get(b.getContext(), "scf");
        return b.create<MapSeqOp>(loc, type, n, dt1, dt2, lowerTo);
      }();
      return b.create<ApplyOp>(loc, type, fun, ValueRange{arg0, arg1});
    }();
  };

  rewriter.create<OutOp>(
      loc, funcOp.getArgument(0),
      mm(rewriter, loc, inAOp.getResult(), inBOp.getResult()));
  rewriter.create<rise::ReturnOp>(loc);

  RiseDialect::dumpRiseExpression(funcOp);

  return;
}
} // namespace

/// gather all patterns
void mlir::populateRiseBuilderTestPatterns(RewritePatternSet &patterns,
                                           MLIRContext *ctx) {
  patterns.insert<RiseBuilderTestPattern>(ctx);
}
//===----------------------------------------------------------------------===//
// Pass
//===----------------------------------------------------------------------===//

/// The pass:
void RiseBuilderTestPass::runOnFunction() {
  auto func = getOperation();
  RewritePatternSet patterns(func->getContext());
  populateRiseBuilderTestPatterns(patterns, &getContext());

  bool erased;
  applyOpPatternsAndFold(func, std::move(patterns), &erased);
  return;
}

std::unique_ptr<OperationPass<FuncOp>> mlir::rise::createRiseBuilderTestPass() {
  return std::make_unique<RiseBuilderTestPass>();
}
